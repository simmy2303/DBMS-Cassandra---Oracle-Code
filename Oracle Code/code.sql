-- create table to store data
CREATE TABLE bench.tamper_recovery_log (
    log_id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tamper_type      VARCHAR2(50),
    dataset_size     VARCHAR2(10),
    tamper_time_ms   NUMBER,
    recovery_time_ms NUMBER,
    run_timestamp    TIMESTAMP DEFAULT SYSTIMESTAMP
);


CREATE OR REPLACE PROCEDURE tamper_delete_lastn (
    p_rows NUMBER,
    p_dataset_size VARCHAR2
) AS
    v_start_time NUMBER;
    v_end_time   NUMBER;
BEGIN
    v_start_time := DBMS_UTILITY.get_time;

    DELETE FROM employees
    WHERE employeeid IN (
        SELECT employeeid
        FROM employees
        ORDER BY employeeid DESC
        FETCH FIRST p_rows ROWS ONLY
    );

    v_end_time := DBMS_UTILITY.get_time;

    INSERT INTO tamper_recovery_log (
        tamper_type, dataset_size, tamper_time_ms, recovery_time_ms
    ) VALUES (
        'DELETE_LASTN', p_dataset_size, (v_end_time - v_start_time) * 1000, NULL
    );

    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE recover_delete_lastn (
    p_dataset_size VARCHAR2
) AS
    v_start_time NUMBER;
    v_end_time   NUMBER;
BEGIN
    v_start_time := DBMS_UTILITY.get_time;

    INSERT INTO employees
    SELECT * FROM baseline_employees
    MINUS
    SELECT * FROM employees;

    v_end_time := DBMS_UTILITY.get_time;

    UPDATE tamper_recovery_log
    SET recovery_time_ms = (v_end_time - v_start_time) * 1000
    WHERE tamper_type = 'DELETE_LASTN'
      AND dataset_size = p_dataset_size
      AND recovery_time_ms IS NULL;

    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE tamper_update_last5 (
    p_rows NUMBER,
    p_dataset_size VARCHAR2
) AS
    v_start_time NUMBER;
    v_end_time   NUMBER;
BEGIN
    v_start_time := DBMS_UTILITY.get_time;

    UPDATE employees
    SET salaryrm = salaryrm + 1000
    WHERE employeeid IN (
        SELECT employeeid
        FROM employees
        ORDER BY employeeid DESC
        FETCH FIRST p_rows ROWS ONLY
    );

    v_end_time := DBMS_UTILITY.get_time;

    INSERT INTO tamper_recovery_log (
        tamper_type, dataset_size, tamper_time_ms, recovery_time_ms
    ) VALUES (
        'UPDATE_LAST5', p_dataset_size, (v_end_time - v_start_time) * 1000, NULL
    );

    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE recover_update_last5 (
    p_dataset_size VARCHAR2
) AS
    v_start_time NUMBER;
    v_end_time   NUMBER;
BEGIN
    v_start_time := DBMS_UTILITY.get_time;

    MERGE INTO employees e
    USING baseline_employees b
    ON (e.employeeid = b.employeeid)
    WHEN MATCHED THEN
        UPDATE SET e.salaryrm = b.salaryrm;

    v_end_time := DBMS_UTILITY.get_time;

    UPDATE tamper_recovery_log
    SET recovery_time_ms = (v_end_time - v_start_time) * 1000
    WHERE tamper_type = 'UPDATE_LAST5'
      AND dataset_size = p_dataset_size
      AND recovery_time_ms IS NULL;

    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE tamper_insert_fake (
    p_rows NUMBER,
    p_dataset_size VARCHAR2
) AS
    v_start_time NUMBER;
    v_end_time   NUMBER;
BEGIN
    v_start_time := DBMS_UTILITY.get_time;

    FOR i IN 1 .. p_rows LOOP
        INSERT INTO employees (employeeid, firstname, lastname, hiredate, salaryrm)
        VALUES (
            (SELECT MAX(employeeid) + i FROM employees),
            'FakeFN', 'FakeLN',
            SYSDATE, 0
        );
    END LOOP;

    v_end_time := DBMS_UTILITY.get_time;

    INSERT INTO tamper_recovery_log (
        tamper_type, dataset_size, tamper_time_ms, recovery_time_ms
    ) VALUES (
        'INSERT_FAKE', p_dataset_size, (v_end_time - v_start_time) * 1000, NULL
    );

    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE recover_insert_fake (
    p_dataset_size VARCHAR2
) AS
    v_start_time NUMBER;
    v_end_time   NUMBER;
BEGIN
    v_start_time := DBMS_UTILITY.get_time;

    DELETE FROM employees
    WHERE firstname = 'FakeFN'
      AND lastname = 'FakeLN'
      AND salaryrm = 0;

    v_end_time := DBMS_UTILITY.get_time;

    UPDATE tamper_recovery_log
    SET recovery_time_ms = (v_end_time - v_start_time) * 1000
    WHERE tamper_type = 'INSERT_FAKE'
      AND dataset_size = p_dataset_size
      AND recovery_time_ms IS NULL;

    COMMIT;
END;
/

-- Execute the main run script
SET SERVEROUTPUT ON;

DECLARE
    v_dataset_sizes  SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST('1k', '5k', '10k');
    v_delete_rows    SYS.ODCINUMBERLIST   := SYS.ODCINUMBERLIST(1, 20, 50);
    v_update_rows    NUMBER := 5;
    v_insert_rows    SYS.ODCINUMBERLIST   := SYS.ODCINUMBERLIST(1, 20, 50);
BEGIN
    FOR i IN 1 .. v_dataset_sizes.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE(CHR(10) || '=== Running for dataset size: ' || v_dataset_sizes(i) || ' ===');

        EXECUTE IMMEDIATE 'TRUNCATE TABLE baseline_employees';
        INSERT INTO baseline_employees SELECT * FROM employees;
        COMMIT;
        tamper_delete_lastn(v_delete_rows(i), v_dataset_sizes(i));
        recover_delete_lastn(v_dataset_sizes(i));

        EXECUTE IMMEDIATE 'TRUNCATE TABLE baseline_employees';
        INSERT INTO baseline_employees SELECT * FROM employees;
        COMMIT;
        tamper_update_last5(v_update_rows, v_dataset_sizes(i));
        recover_update_last5(v_dataset_sizes(i));

        EXECUTE IMMEDIATE 'TRUNCATE TABLE baseline_employees';
        INSERT INTO baseline_employees SELECT * FROM employees;
        COMMIT;
        tamper_insert_fake(v_insert_rows(i), v_dataset_sizes(i));
        recover_insert_fake(v_dataset_sizes(i));
    END LOOP;

    COMMIT;
END;
/
